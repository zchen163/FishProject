def rotation(fname):
    temp = ToBNW('../data/templates/template_color1.png', ksize = 3)
    # temp = imread()
    # temp = cv2.resize(temp, dsize = None, fx = 0.5, fy = 0.5)
    w, h = temp.shape[0:2]
    print(w, h)
    cv2.imshow('a', temp)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    # image1 = cv2.imread('../data/CC Lake BW/Cond3/DSC00839.jpg')
    image1 = ToBNW(fname, fx = 0.5)
    # image1 = cv2.resize(image1, dsize = (1224, 918))
    # image1 = cv2.resize(image1, dsize = None, fx = 0.25, fy = 0.25)
    W, H = image1.shape[0:2]
    print(W, H)
    image1_flip = cv2.flip(image1, 1)
    cv2.imshow('normal', image1)
    cv2.imshow('flip', image1_flip)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    # start template matching, and look for different angles:
    best_match_score = 0
    res = None
    # all available methods: methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR', 'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']

    # cv2.TM_CCORR_NORMED, cv2.TM_CCOEFF_NORMED give correct using color_right template, exactly same
    # if using the left template and flip,
    method = cv2.TM_CCORR_NORMED

    # scale template as well:

    for s in np.arange(0.7, 1.3, 0.05):
        # print(s)
        temp = cv2.resize(temp, None, fx = s, fy = s)
        for i in range(36):
        #     # the rotate takes angle in degrees
            img_rot = rotate(image1, 10 * i, mode = 'constant', reshape = False, cval = 0)
            img_rotflip = rotate(image1_flip, 10 * i, mode = 'constant', reshape = False, cval = 0)
            # set reshape = true, cval = 255 good for part 4-1,2,4...
            # print(img_rot.dtype, temp.dtype)
            res_rot = cv2.matchTemplate(img_rot, temp, method)
            res_rotflip = cv2.matchTemplate(img_rotflip, temp, method)
            # print(res_rot)
            if res_rot.max() >= best_match_score:
                best_match_score = res_rot.max()
                res = res_rot
                best_img = img_rot
                info = ('rot', i, s)
            elif res_rotflip.max() >= best_match_score:
                best_match_score = res_rotflip.max()
                res = res_rotflip
                best_img = img_rotflip
                info = ('rotflip', i, s)
    print(best_match_score, best_img.shape)
    print(info)

    # plot best image orientation
    best = cv2.imread(fname)
    best = rotate(best, 10 * info[1], mode = 'constant', reshape = False, cval = 0)
    if info[0] == 'rotflip':
        best = cv2.flip(best, 1)

    cv2.imshow('best', best)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

test the successful rate in first 20 samples: 
parameters: temp ksize, image ksize, image fx, rotation range(36), angle 10, template shrink arange(0.7, 1.3, 0.05), method
default: temp ksize 3, image ksize 5, image fx 0.5, rotation range(36), angle 10, template shrink arange(0.7, 1.3, 0.05), method


count as: correct, upside down, left-right
1) default: 10, 7, 3
2) temp ksize = 1, same
3) image kszie = 7, same
4) image fx = 0.45, better, 11, 7, 2
5) finder range of template change, arange(0.7, 1.3, 0.025), badbadbad, 4, 6, 10...

6ï¼‰at home, the templates may have changed... now using template color 1, fx = 0.5
some other condition, the result is fine. need to align well, so adjust rotation? 

it is ok to facing right ... at this moment
rotation range. 

Found that using no blackwhite, still works...

